const stringCalculator = require("./stringCalculator");

describe("Testing String Calculator", () => {
  test("Testing with simple inputs", () => {
    expect(stringCalculator("")).toBe(0);
    expect(stringCalculator("1")).toBe(1);
    expect(stringCalculator("1,5")).toBe(6);
  });

  
  test("Testing with input string of any length", () => {
    expect(stringCalculator("1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,1,1,1,2,3,45,6,6,7")).toBe(10667);
  });
  
  test("Testing with input string that handles new lines between numbers", () => {
    expect(stringCalculator("1\n2,3")).toBe(6);
  });
  
  test("Testing with input string that supports different delimiters", () => {
    expect(stringCalculator("//;\n1;2")).toBe(3);
  });

});
